// assignment-service/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum QuestionType {
  pilgan
  esai

}

enum AssignmentType {
  pilgan
  esai
  upload_gambar
  link_google
}

model Assignment {
  id           Int      @id @default(autoincrement())
  title        String
  description  String?  @db.Text
  dueDate      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  topicId      Int?
  
  type         AssignmentType // Sekarang baris ini akan valid

  externalUrl  String?  @db.Text
  startTime    DateTime?
  endTime      DateTime?
  timeLimit    Int?
  attemptLimit Int?     @default(1)
  passingGrade Int?     @default(70)

  questions    Question[] @relation("AssignmentQuestions")
  submissions  Submission[]
}

model Question {
  id           Int          @id @default(autoincrement())
  questionText String       @db.Text
  type         QuestionType
  topic        String?
  authorId     Int
  options      Option[]
  assignments  Assignment[] @relation("AssignmentQuestions")
}

model Option {
  id          Int     @id @default(autoincrement())
  optionText  String
  isCorrect   Boolean @default(false)
  explanation String?
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  Int
}

model Submission {
  id              Int       @id @default(autoincrement())
  submissionDate  DateTime  @default(now())
  score           Float?
  essayAnswer     String?   @db.Text
  fileUrl         String?
  studentId       Int
  assignment      Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId    Int
  updatedAt       DateTime  @updatedAt
  selectedOptions Json?
  startedOn       DateTime?
  completedOn     DateTime?
  timeTakenMs     Int?

  @@unique([studentId, assignmentId])
}