// assignment-service/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---
enum QuestionType {
  pilgan
  esai
}

// --- MODELS ---
model Assignment {
  id           Int      @id @default(autoincrement())
  title        String
  description  String?  @db.Text
  dueDate      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  topicId      Int?

  // Pengaturan Kuis/Tugas
  externalUrl  String?  @db.Text
  startTime    DateTime?
  endTime      DateTime?
  timeLimit    Int?
  attemptLimit Int?     @default(1)
  passingGrade Int?     @default(70)

  // --- PERUBAHAN 1: Relasi diubah menjadi many-to-many ---
  // Menghubungkan tugas ini ke banyak soal dari bank soal
  questions    Question[] @relation("AssignmentQuestions")

  submissions  Submission[]
}

// Model untuk BANK SOAL
model Question {
  id           Int          @id @default(autoincrement())
  questionText String       @db.Text
  type         QuestionType // Menggunakan Enum baru untuk tipe soal

  // --- PERUBAHAN 2: Menambahkan metadata untuk Bank Soal ---
  topic        String?      // Kategori soal, misal: "Aljabar", "Sejarah Kemerdekaan"
  authorId     Int          // Menyimpan ID guru yang membuat soal

  // --- PERUBAHAN 3: Relasi diubah dan foreign key dihapus ---
  // Menghapus `assignmentId` karena soal tidak lagi milik satu tugas
  options      Option[]

  // Menghubungkan satu soal ke banyak tugas
  assignments  Assignment[] @relation("AssignmentQuestions")
}

model Option {
  id          Int     @id @default(autoincrement())
  optionText  String
  isCorrect   Boolean @default(false)
  explanation String?

  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
}

model Submission {
  id             Int       @id @default(autoincrement())
  submissionDate DateTime  @default(now())
  score          Float?
  essayAnswer    String?   @db.Text
  fileUrl        String?
  studentId      Int

  assignment     Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId   Int

  updatedAt      DateTime  @updatedAt

  selectedOptions Json?
  startedOn      DateTime?
  completedOn    DateTime?
  timeTakenMs    Int?

  @@unique([studentId, assignmentId])
}